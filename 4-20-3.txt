class Gloves {
public:
    int findMinimum(int n, vector<int> left, vector<int> right) {
        // write code here
        /*
        在一个非递增数列a1,a2...an中，想要获取一个值要覆盖每一种值，公式为
        n = sum（a1,a2...an）-min（a1,a2...an）+1
        用总数减去这些数中的最小值，然后加一
        所以对于左右手手套颜色都有数量的序列，取左边和右边的最小值即可
        */
        
        int left_min = INT_MAX, left_sum = 0;
        int right_min = INT_MAX, right_sum = 0;
        
        //用于统计在左右手中某种颜色手套为0的个数；
        int sum = 0;
        
        for(int i = 0; i < n; ++i)
        {
            if(left[i]*right[i] == 0)
                //统计某种颜色的左手或右手手套的个数为0的手套数量
                sum += left[i]+right[i];
            else
            {
                left_min = min(left_min, left[i]);
                right_min = min(right_min, right[i]);
                right_sum += right[i];
                left_sum += left[i];
            }
        }
        
        //结果为有左右都有数量的手套序列的结果+有0存在的手套数+最后再加一肯定就能保证了
        return sum + min(left_sum-left_min+1,right_sum-right_min+1)+1;
    }
};