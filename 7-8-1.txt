template <class T>
struct AVLNode
{
	AVLNode(const T& val = T())
	: _left(nullptr)
	, _right(nullptr)
	, _parent(nullptr)
	, _data(val)
	, _bf(0)
	{}

	AVLNode* _left;
	AVLNode* _right;
	AVLNode* _parent;

	T _data;
	T _bf;
};

template <class T>
class AVLTree
{
public:
	typedef AVLNode<T> Node;

	bool Insert(const T& val)
	{
		if (_root == nullptr)
		{
			_root = new Node(val);
			return true;
		}

		Node* cur = _root;
		Node* parent = nullptr;

		while (cur)
		{
			if (cur->_data < val)
			{
				parent = cur;
				cur = cur->_right;
			}
			else if (cur->_data > val)
			{
				parent = cur;
				cur = cur->_left;
			}
			else
				return false;	
		}

		cur = new Node(val);

		if (parent->_data > val)
			parent->_left = cur;
		else
			parent->_right = cur;
		cur->_parent = parent;

		//开始更具平衡因子调平衡
		while (parent)
		{
			//如果节点加在了左侧，平衡因子--，否则++
			if (parent->_left == cur)
				--parent->_bf;
			else
				++parent->_bf;

			//如果当前平衡因子为0，说明已经平衡，可以直接跳出
			if (parent->_bf == 0)
				break;
			//如果是1或者是-1，说明还需要继续向上调整
			else if (parent->_bf == 1 || parent->_bf == -1)
			{
				cur = parent;
				parent = parent->_parent;
			}
			//如果平衡因子是-2或者是2，说明以parent为根的树已经失衡，需要调整
			else if (parent->_bf == -2 || parent->_bf == 2)
			{
				
				if (parent->_bf == 2 && cur->_bf == -1)
				{
					RotateRL(parent);
				}
				else if (parent->_bf == 2 && cur->_bf == 1)
				{
					RotateL(parent);
				}
				else if (parent->_bf == -2 && cur->_bf == -1)
				{
					RotateR(parent);
				}
				else
				{
					RotateLR(parent);
				}

				break;
			}
		}

		return true;
	}
	void RotateLR(Node* parent)
	{
		Node* subL = parent->_left;
		RotateL(subL);
		RotateR(parent);
	}

	void RotateRL(Node* parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;
		int bf = subRL->_bf;
		RotateR(subR);
		RotateL(parent);
		if (bf == -1)
		{
			parent->_bf = 0;
			subR->_bf = 1;
		}
		else if (bf == 1)
		{
			parent->_bf = -1;
			subR->_bf = 0;
		}
	}

	void RotateR(Node* parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;

		//向下链接
		subL->_right = parent;
		parent->_left = subLR;
		
		//双向链接
		//这里需要注意parent是不是根节点，如果是根节点就没有左右子树之分，直接将subL做为根节点就好
		if (parent != _root)
		{
			Node* gparent = parent->_parent;
			subL->_parent = gparent;

			if (gparent->_left == parent)
				gparent->_left = subL;
			else
				gparent->_right = subL;
		}
		else
		{
			_root = subL;
			subL->_parent = nullptr;
		}

		//向上链接
		if (subLR)
			subLR->_parent = parent;
		parent->_parent = subL;

		//调整平衡因子
		subL->_bf = Hight(subL->_right) - Hight(subL->_left);
		parent->_bf = Hight(parent->_right) - Hight(parent->_left);
		
	}

	void RotateL(Node* parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;

		//向下链接
		subR->_left = parent;
		parent->_right = subRL;

		//双向链接,同样判断是不是根节点
		if (parent != _root)
		{
			Node* gparent = parent->_parent;
			subR->_parent = gparent;
			if (gparent->_left == parent)
				gparent->_left = subR;
			else
				gparent->_right = subR;
		}
		else
		{
			_root = subR;
			subR->_parent = nullptr;
		}
		//向上链接
		if (subRL)
			subRL->_parent = parent;
		parent->_parent = subR;

		//调整平衡因子
		subR->_bf = Hight(subR->_right) - Hight(subR->_left);
		parent->_bf = Hight(parent->_right) - Hight(parent->_left);
	}

	bool IsAVLTree()
	{
		return _IsAVLTree(_root);
	}

	bool _IsAVLTree(Node* root)
	{
		if (root == nullptr)
			return true;

		int right = Hight(root->_right);
		int left = Hight(root->_left);
		if (right - left != root->_bf)
		{
			cout << "节点" << root->_data << "异常" << endl;
			return false;
		}

		return (abs(root->_bf)<2 && _IsAVLTree(root->_left) && _IsAVLTree(root->_right));
	}

	void InOrder()
	{
		_Inorder(_root);
		cout << endl;
	}

	void _Inorder(Node* root)
	{
		if (root)
		{
			_Inorder(root->_left);
			cout << root->_data << " ";
			_Inorder(root->_right);
		}
	}

	int Hight(Node* root)
	{
		if (root)
		{
			int left = Hight(root->_left);
			int right = Hight(root->_right);
			return left > right ? left + 1 : right + 1;
		}
		else
			return 0;
	}
private:
	Node* _root = nullptr;
};
