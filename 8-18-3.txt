#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

struct TreeNode
{
	int data;
	TreeNode* left = nullptr;
	TreeNode* right = nullptr;
};

vector<vector<int>> Print(TreeNode* pRoot)
{
	vector<vector<int> > ret;
	if (pRoot)
		return ret;

	stack<TreeNode*> s1;
	stack<TreeNode*> s2;
	TreeNode* cur = nullptr;
	s1.push(pRoot);
	while (!s1.empty() || !s2.empty())
	{
		vector<int> tmp;
		while (!s1.empty())
		{
			cur = s1.top();
			s1.pop();

			tmp.push_back(cur->data);

			if (cur->left)
				s2.push(cur->left);
			if (cur->right)
				s2.push(cur->right);
		}

		if (!tmp.empty())
		{
			ret.push_back(tmp);
			tmp.clear();
		}

		while (!s2.empty())
		{
			cur = s2.top();
			s2.pop();

			tmp.push_back(cur->data);

			if (cur->right)
				s1.push(cur->right);
			if (cur->left)
				s1.push(cur->right);
		}

		if (!tmp.empty())
		{
			reverse(tmp.begin(), tmp.end());
			ret.push_back(tmp);
			tmp.clear();
		}
	}

	return ret;

}