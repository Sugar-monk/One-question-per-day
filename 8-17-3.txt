
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int* Count(const char* text)
{
	int buf[24];
	char* cur = (char*)text;
	while (cur)
	{
		if ((*cur) >= 'A' && (*cur) <= 'Z')
			buf[(*cur) - 'A']++;

		cur++;
	}

	return buf;
}

float Sum(int n)
{
	float sum = 0.0;
	for (float i = 1.0; i <= n; ++i)
		sum += 1 / i;

	return sum;
}

void remove(char* text)
{
	char* cur = text;
	while (*cur)
	{
		*cur++ = (*cur) == ',' ? ' ' : (*cur);
	}
}

uint64_t convet(const char* text)
{
	char* cur = (char*)text;
	uint64_t ret = 0;

	for (int i = 8; i > 0; ++i)
	{
		if ((*cur) >= '0' && (*cur) <= '9')
		{
			ret += ((*cur) - '0') * pow(16, 8 - i);
		}
		else
		{
			ret += (10 + (*cur) - 'A') * pow(16, 8 - i);
		}
	}

	return ret;
}
struct Point
{
	int x;
	int y;
};

bool len(int x1, int x2, int y1, int y2)
{
	int l1 = pow(x2 - x1, 2);
	int l2 = pow(y2 - y1, 2);
	return(1 == pow(l2 + l1, 0.5));
}

int has(struct Point* ary, int n)
{
	int ret = 0;

	for (int i = 0; i < n; ++i)
	{
		for (int j = i; j < n; ++j)
		{
			if (len((ary + i)->x, (ary + j)->x, (ary + i)->y, (ary + j)->y))
			{
				ret = 1;
				return ret;
			}
		}
	}
	return ret;
}

