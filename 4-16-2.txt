#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

//计算该数的公约数
void Divisor(int n,vector<int>& buff)
{
    for(size_t i = 2; i <= sqrt(n); ++i)
    {
        if(n%i == 0)
        {
            buff.push_back(i);
            //如果这个数不是平方数，那么也将另一个数加入到列表中
            if(n/i != i)
                buff.push_back(n/i);
        }
    }
}

int Jump_Slab(int n, int m)
{
    //存放从起始位置到每个位置所需要的步数
    vector<int> Slab(m+1,0);
    //从n位置走到n位置只需要1步，所以初始化为1
    Slab[n] = 1;
    
    for(size_t i = n; i < m; ++i)
    {
        //如果这个位置为0，说明不能走到这个位置，跳出此次循环
        if(0 == Slab[i])
            continue;
        //存放i位置可以走的步数
        vector<int> Jump;
        Divisor(i,Jump);
        //Slab[Jump[j] + i]是当前可以走到的位置
        for(size_t j = 0; j < Jump.size(); ++j)
        {
            //由位置i出发能到达的点为 stepNum[divNum[j]+i]
            if(Jump[j] + i <= m && Slab[Jump[j] + i] != 0)
                //如果到达了这次可以走到的地方没有超过M点，
                //并且这个位置已经来过，要取从起点到这个位置的步数和现在要更新的步数最少的
                Slab[Jump[j] + i] = min(Slab[Jump[j] + i], Slab[i]+1);
            else if(Jump[j] + i <= m)
                ///将可以走的位置更新，由于是在i位置开始走的下一步，
                //所以走到这里的步数在i位置的基础上加一
                Slab[Jump[j] + i] = Slab[i]+1;
        }
    }
    
    if(0 == Slab[m])
        return -1;
    else
        return Slab[m] -= 1;
}

int main()
{
    int n,m;
    cin >> n >> m;
    cout << Jump_Slab(n,m) << endl;
    return 0;
}