class Solution {
public:
    
    int numDistinct(string S, string T) {
        int s_size = S.size();
        int t_size = T.size();
        // S的长度小于T长度，不可能含有与T相同的子串
        if (S.size() < T.size()) return 0;
        // T为空串，只有空串与空串相同，S至少有一个子串，它为空串
        if (T.empty()) return 1;
 
        // F(i,j)，初始化所有的值为0
        vector<vector<int> > f(s_size + 1, vector<int>(t_size + 1, 0));
        // 空串与空串相同的个数为1
		f[0][0] = 1;
        for (int i = 1; i <= s_size; ++i) {
            // F(i,0)初始化
            f[i][0] = 1;
            for (int j = 1; j <= t_size; ++j) {
                // S的第i个字符与T的第j个字符相同
                if (S[i-1] == T[j-1]) {
                    f[i][j] = f[i-1][j] + f[i-1][j-1];
                }
                else {
                    // S的第i个字符与T的第j个字符不相同
                    // 从S的前i-1个字符中找子串，使子串与T的前j个字符相同
                    f[i][j] = f[i-1][j];
                }
            }
        }
 
        return f[s_size][t_size];
    }
};